rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
     // Allow users to read and write their own user document
    match /users/{userId} {
      allow read, create, write: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == userId;
    }

    // Helper function to check if a user is a member of a chatroom
    function isMemberChat(userId) {
      return request.auth.uid != null && resource.data.members.hasAny([userId]);
    }
    // Helper function to check if a user is a member of a chatroom from the messages scope
  	function isMemberMessage(chatroomId, userId) {
			let chatroomDoc = get(/databases/$(database)/documents/chatrooms/$(chatroomId));
  		return chatroomDoc.data.members.hasAny([userId]);
		}
    
    // Allow authenticated users to read and write chatrooms
    match /chatrooms/{chatroomId} {
      allow create: if request.auth.uid != null;
      allow read,update, delete: if isMemberChat(request.auth.uid);
      
  		match /messages/{messageId} {
        allow update, delete: if request.auth.uid == resource.data.uid;
        allow create,write,read: if isMemberMessage(chatroomId, request.auth.uid);
  		}
      
    }
    
    // Helper function to check if a user is a member of a chatroom
    function isMemberContract(userId) {
      return resource.data.clientUid == userId || resource.data.freelancerUid == userId;
    }
    
    // Allow authenticated users to read and write chatrooms
    match /contracts/{contractId} {
      allow create: if request.auth.uid != null;
      allow read,update, delete: if isMemberContract(request.auth.uid);
      
  		match /milestones/{milestoneId} {
        allow update, delete;
        allow create,write,read;
  		}
      
    }
  }
}



